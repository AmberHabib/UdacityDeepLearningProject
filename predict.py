# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XIvQHFdzWILPHCa7wIKSPO89ICuSK4na
"""

import warnings
warnings.filterwarnings('ignore')

import json
import argparse
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub


import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)


from PIL import Image

#Using this mentor answer to help set up the argparse arguments
#https://knowledge.udacity.com/questions/230319

#argument parser function, to parse arguments in this order
#image path, model path, top K, class labels
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', action='store', help='image path')
    parser.add_argument('checkpoint', action='store', help='model path')
    parser.add_argument('--top_k', action='store', type=int, default=1, help='top k number of probabilitesi')
    parser.add_argument('--category_names', action='store', help='map class labels to flower names')
    args=parser.parse_args()
    return parser.parse_args()


#process image function
def process_image(image):
    image_size = 224
    image = tf.convert_to_tensor(image)
    image = tf.image.resize(image, (image_size,image_size))
    image /= 255
    image = image.numpy()
    return image

#predict function  
def predict(img, model, top_k):
  image = Image.open(img)
  image = np.asarray(image)
  processed_image = process_image(image)
  processed_image = np.expand_dims(processed_image, axis = 0)
  prediction = model.predict(processed_image)
  probs, classes = tf.math.top_k(prediction,top_k)
  probs = probs.numpy().squeeze()
  classes = classes.numpy().squeeze()
  classes = [str(i+1) for i in classes]
  return probs, classes


def main():
    #parse arguments
    args = parse_args()
    
    #load model
    model = tf.keras.models.load_model('./'+args.checkpoint, custom_objects={'KerasLayer': hub.KerasLayer})
   
    # load  class labels from label map.json
    with open(args.category_names, 'r') as f:
        cat_to_name = json.load(f)

    #path to image
    img_path = args.path
    
    #call predict function, which will call process image function
    probs,classes = predict(img_path, model, int(args.top_k))

    # map labels to class names
    labels = [cat_to_name[str(index)] for index in classes]
    probability = probs
    print('File selected: ' + img_path)
    print(labels)
    print(probability)

    i=0 # this prints out top k classes and probs as according to user
    while i < len(labels):
        print("{} with a probability of {}".format(labels[i], probability[i]))
        i += 1 # cycle through

if __name__ == "__main__":
    main()